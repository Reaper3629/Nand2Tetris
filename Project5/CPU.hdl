// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
                         // "value of the currently selected data memory register"
        
        instruction[16], // Instruction for execution
                         // value of the selected instruction memory register
        
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
                         // What we want to write

        writeM,          // Write to M?
                         // Enables us to write in the memory 

        addressM[15],    // Address in data memory (of M)
                         // where we want to write it 
        pc[15];          // address of next instruction

    // C-Style Bit
    // 1  1  1  a  c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
    // 15 14 13 12 11
    // a - determines whether to use the A register or the M register in the computation.
    // c1 - c6 - are the control bits for the ALU
    // d1 - A - Register ; instruction[5]
    // d2 - D - Register ; instruction[4]
    // d3 - M - Register ; instruction[3]
    // j1 ; instruction[2]
    // j2 ; instruction[1]
    // j3 ; instruction[0]

    // A - Instruction Format
    // 0 v v v v v v v v v v v v v v v

    PARTS:

    // If it's a C-Instruction, then it's not a A-Instruction 
    // cInst = instruction[15]
    // aInst = not(instruction[15])
    Not(in=instruction[15],out=aInst);

    // addressM
    Mux16(a=ALUout,b=instruction,sel=aInst,out=a);

    // Checks if instruction is a A-Instruction
    // or if its going to the A-Register
    Or(a=aInst,b=instruction[5],out=loadToAReg);
    ARegister(in=a,load=loadToAReg,out=b,out[0..14]=addressM);

    // A 0r M
    And(a=instruction[15], b=instruction[12],out=AorM);
    Mux16(a=b,b=inM,sel=AorM,out=y);

    ALU(x=x,y=y,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=ALUout,out=outM,zr=zr,ng=ng);
    
    // x
    And(a=instruction[4],b=instruction[15], out=loadToD);
    DRegister(in=ALUout,load=loadToD,out=x);
    
    // zr = zero ; ng = negative
    Not(in=ng,out=pos);
    // ng -> positive
    Not(in=zr, out=nonZr);
    // ALU == 0 -> ALU != 0

    // writeM
    // If it's a C-insutruction and affecting the M-register than write M
    And(a=instruction[15],b=instruction[3],out=writeM);

    // JMP | J1 | J2 | J3 |
    // JGT | 0 | 0 | 1 | If (ALU > 0)
    // JEQ | 0 | 1 | 0 | If (ALU = 0)
    // JLT | 1 | 0 | 0 | If (ALU out < 0)

    And(a=instruction[0],b=instruction[15],out=jgt);
    And(a=instruction[1],b=instruction[15],out=jeq);
    And(a=instruction[2],b=instruction[15],out=jlt);

    And(a=jgt,b=pos,out=aluPos);
    And(a=aluPos,b=nonZr,out=load1);

    And(a=jeq,b=zr,out=load2);

    And(a=jlt,b=ng,out=aluNeg);
    And(a=aluNeg,b=nonZr,out=load3);

    Or(a=load1,b=load2,out=jmp1);
    Or(a=jmp1,b=load3,out=load);

    PC(in=b,load=load,inc=true,reset=reset,out[0..14]=pc);
}